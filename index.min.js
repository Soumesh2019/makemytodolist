const express=require("express"),bodyParser=require("body-parser"),ejs=require("ejs"),bcrypt=require("bcrypt"),mongoose=require("mongoose"),app=express();app.use(bodyParser.urlencoded({extended:!0})),app.use(express.static(__dirname+"/public/")),app.set("view engine","ejs");const saltRounds=10;let isLoggedIn=!1,userId="";mongoose.connect("mongodb://localhost:27017/toDoDB",{useNewUrlParser:!0,useUnifiedTopology:!0});const userSchema=new mongoose.Schema({username:{type:String,required:[!0,"Please Provide username"]},password:{type:String,required:[!0,"Please Provide password"]},email:{type:String,required:[!0,"Please Provide email"]},toDoItem:Array}),userModel=new mongoose.model("user",userSchema);app.get("/",(req,res)=>{res.render("home",{error:""})}),app.get("/todo",(req,res)=>{isLoggedIn?res.redirect("/user/"+userId):res.render("home",{error:"Please Login or Register to continue"})}),app.route("/register").get((req,res)=>{res.render("register")}).post((req,res)=>{const username=req.body.username,password=req.body.password,email=req.body.email;userModel.findOne({email:email},(err,foundUser)=>{foundUser?res.send("User already exists"):bcrypt.hash(password,10,(function(err,hash){if(err)console.log(err),res.redirect("/register");else{const user=new userModel({username:username,email:email,password:hash});user.save((err,result)=>{err||(isLoggedIn=!0,res.redirect("/user/"+result._id))})}}))})}),app.route("/login").get((req,res)=>{res.render("login")}).post((req,res)=>{const email=req.body.email,userpassword=req.body.password;userModel.findOne({email:email},(err,foundUser)=>{err?(console.log(err),res.redirect("/login")):foundUser?bcrypt.compare(userpassword,foundUser.password,(function(err,result){result?(isLoggedIn=!0,res.redirect("/user/"+foundUser._id)):err?console.log(err):res.send("Wrong passsord")})):(console.log("User not Found"),res.redirect("/register"))})}),app.get("/user/:userId",(req,res)=>{isLoggedIn?(userId=req.params.userId,userModel.findOne({_id:userId},(err,foundUser)=>{err||res.render("todo",{userId:userId,name:foundUser.username,itemsArray:foundUser.toDoItem})})):res.redirect("/login")}),app.post("/submit",(req,res)=>{const userId=req.body.userId,item=req.body.item;userModel.updateOne({_id:userId},{$push:{toDoItem:item}},(err,result)=>{err?err&&(console.log(err),res.send(new Error(err))):res.redirect("/user/"+userId)})}),app.post("/completed",(req,res)=>{}),app.post("/logout",(req,res)=>{isLoggedIn=!1,res.redirect("/login")}),app.listen(3e3,()=>console.log("Server is running on 3000"));