const express=require("express"),bodyParser=require("body-parser"),ejs=require("ejs"),bcrypt=require("bcrypt"),mongoose=require("mongoose"),cookieParser=require("cookie-parser"),app=express();app.use(bodyParser.urlencoded({extended:!0})),app.use(express.static(__dirname+"/public")),app.set("view engine","ejs"),app.use(cookieParser());const saltRounds=10;function greeting(){let greetings="",time=(new Date).getHours();return time>=0&&time<=10?greetings="Good Morning":time>=11&&time<=15?greetings="Good Afternoon":time>=16&&time<=21?greetings="Good Evening":time>=22&&(greetings="Good Night"),greetings}function todaysDate(){let day,month,year,date;return(new Date).getDate()+"-"+(new Date).getUTCMonth()+"-"+(new Date).getUTCFullYear()}mongoose.connect("mongodb+srv://admin-sk0564845:xsXsnqCXzYdvXQji@mycluster.m3q9x.mongodb.net/toDoDB",{useNewUrlParser:!0,useUnifiedTopology:!0});const userSchema=new mongoose.Schema({username:{type:String,required:[!0,"Please Provide username"]},password:{type:String,required:[!0,"Please Provide password"]},email:{type:String,required:[!0,"Please Provide email"]},toDoItem:Array}),userModel=new mongoose.model("user",userSchema);app.get("/",(req,res)=>{res.render("home",{error:""})}),app.get("/todo",(req,res)=>{"true"===req.cookies.isLoggedIn?res.redirect("/user/"+req.cookies.userId):res.render("home",{error:"Please Login or Register to continue"})}),app.route("/register").get((req,res)=>{res.render("register",{error:""})}).post((req,res)=>{const username=req.body.username,password=req.body.password,email=req.body.email;userModel.findOne({email:email},(err,foundUser)=>{foundUser?res.render("register",{error:"User already Exists"}):bcrypt.hash(password,10,(function(err,hash){if(err)console.log(err),res.redirect("/register");else{const user=new userModel({username:username,email:email,password:hash});user.save((err,result)=>{err||(res.setHeader("set-cookie",["isLoggedIn= true; httponly",`userId= ${result._id}; httponly`]),res.redirect("/user/"+result._id))})}}))})}),app.route("/login").get((req,res)=>{res.render("login",{error:""})}).post((req,res)=>{const email=req.body.email,userpassword=req.body.password;userModel.findOne({email:email},(err,foundUser)=>{err?(console.log(err),res.redirect("/login")):foundUser?bcrypt.compare(userpassword,foundUser.password,(function(err,result){result?(res.setHeader("set-cookie",["isLoggedIn= true; httponly",`userId= ${foundUser._id}; httponly`]),res.redirect("/user/"+foundUser._id)):err?console.log(err):res.render("login",{error:"Wrong passsord"})})):res.render("login",{error:"User not Found"})})}),app.get("/user/:userId",(req,res)=>{"true"===req.cookies.isLoggedIn?(userId=req.params.userId,userModel.findOne({_id:userId},(err,foundUser)=>{err||res.render("todo",{userId:userId,name:foundUser.username,itemsArray:foundUser.toDoItem,day:greeting(),date:todaysDate(),error:""})})):res.redirect("/login")}),app.post("/submit",(req,res)=>{const userId=req.body.userId,item=req.body.item;""===item?res.redirect("/user/"+userId):userModel.updateOne({_id:userId},{$push:{toDoItem:item}},(err,result)=>{err?err&&(console.log(err),res.send(new Error(err))):res.redirect("/user/"+userId)})}),app.post("/delete",(req,res)=>{const item=req.body.index,userID=req.body.userID;userModel.updateOne({_id:userID},{$pull:{toDoItem:{$in:[item]}}},(err,result)=>{err?console.log(err):res.redirect("/user/"+userId)})}),app.post("/logout",(req,res)=>{res.setHeader("set-cookie",["isLoggedIn= false"]),res.redirect("/")}),app.get("*",(req,res)=>{res.status(404).send("Error 404")});const PORT=process.env.PORT||3e3;app.listen(PORT,()=>console.log("Server is running on"+PORT));